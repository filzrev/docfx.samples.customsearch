const pagefind = await import("../pagefind/pagefind.js");

// Define required variables.
globalThis.window = {};
globalThis.document = {};

onmessage = async function(e) {
  if (e.data.q) {
    const query = e.data.q
    // pagefind.preload(query);
    const results = pagefind.debouncedSearch(query)
                            .then(async search => {
                              if(!search) {
                                 // TODO: Confirm error condition.
                                 return;
                              }

                              // TODO: Currently limit max item count to `1000`. It needs to implement paging.
                              // TODO: Need to limit concurrent request. And need to 
                              const items = await Promise.allSettled(search.results.slice(0, 1000).map(async (r) => await r.data()))
                              
                              items.filter(x=>x.status=='rejected')
                                  .forEach(x=> console.error(x));
                              
                              const results = items.filter(x=>x.status=='fulfilled').map(item => ({
                                href: item.value.url,
                                title: item.value.meta.title,
                                keywords: item.value.excerpt
                              }));
                              
                              postMessage({ e: "query-ready", d: results });
                            });
    
  } else if (e.data.init) {
    await pagefind.options({
      bundlePath: "/pagefind"
    });
    pagefind.init();
    postMessage({ e: "index-ready" });
  }
};

postMessage({ e: "index-ready" });
